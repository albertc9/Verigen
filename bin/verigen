#!/bin/bash

VERIGEN_VERSION="1.0"
WORKDIR=$(pwd)
TOOLS_DIR="$WORKDIR/tools"

# 设置环境变量，确保在 verigen 环境内可以引用工具
function set_env_variables() {
    export PATH="$TOOLS_DIR/iverilog/bin:$TOOLS_DIR/yosys/bin:$TOOLS_DIR/netlistsvg/bin:$PATH"
    export LD_LIBRARY_PATH="$TOOLS_DIR/iverilog/lib:$TOOLS_DIR/yosys/lib:$LD_LIBRARY_PATH"
}

HELP_TEXT="
Verigen v$VERIGEN_VERSION - A powerful Verilog automation tool

Usage:
  verigen                         Enter Verigen interactive shell.
  verigen testbench.v dut.v       Run Verilog simulation using iverilog & vvp.
  verigen -a dut.v / -all         Generate netlist (dut.json) and SVG (dut.svg).
  verigen -j dut.v                Generate only netlist (dut.json), no SVG.
  verigen -s dut.v                Generate netlist (dut.json) and SVG, then delete SVG.
  verigen --version               Display the version of Verigen.
  verigen -help                   Display this help message.

  .q                              Exit Verigen shell.
"

# 进入 Verigen Shell 交互模式
function enter_shell() {
    clear
    echo " ___      ___ _______   ________  ___  ________  _______   ________        "
    echo "|\  \    /  /|\  ___ \ |\   __  \|\  \|\   ____\|\  ___ \ |\   ___  \      "
    echo "\ \  \  /  / | \   __/|\ \  \|\  \ \  \ \  \___|\ \   __/|\ \  \\ \  \     "
    echo " \ \  \/  / / \ \  \_|/_\ \   _  _\ \  \ \  \  __\ \  \_|/_\ \  \\ \  \    "
    echo "  \ \    / /   \ \  \_|\ \ \  \\  \\ \  \ \  \|\  \ \  \_|\ \ \  \\ \  \   "
    echo "   \ \__/ /     \ \_______\ \__\\ _\\ \__\ \_______\ \_______\ \__\\ \__\  "
    echo "    \|__|/       \|_______|\|__|\|__|\|__|\|_______|\|_______|\|__| \|__|  "
    echo
    echo "===================================="
    echo "Welcome to Verigen v$VERIGEN_VERSION"
    echo "ALBERT BROUGHT ME TO LIFE!"
    echo "------------------------------------"
    echo "Type '.help' to display help message."
    echo "===================================="

    # 设置环境变量，只在当前会话有效
    set_env_variables

    while true; do
        echo -n "> "  # 交互式提示符
        read -r CMD
        if [[ "$CMD" == ".q" ]]; then
            echo "Exiting Verigen..."
            break
        elif [[ "$CMD" == ".help" ]]; then
            echo "$HELP_TEXT"
        elif [[ "$CMD" == "" ]]; then
            continue
        fi
        eval "$CMD"
    done
}

# 处理 Verilog 仿真
function run_simulation() {
    local dut="$1"
    local testbench="$2"
    
    if [[ ! -f "$dut" || ! -f "$testbench" ]]; then
        echo "Error: Verilog files not found."
        exit 1
    fi
    
    echo "Running simulation..."
    iverilog -o simv "$testbench" "$dut"
    vvp simv
    rm -f simv
}

# 生成 Netlist 和 SVG
function generate_netlist() {
    local dut="$1"
    local json_file="${dut%.v}.json"
    local svg_file="${dut%.v}.svg"

    # 生成 JSON
    echo "read_verilog $dut" > script.ys
    echo "proc; opt" >> script.ys
    echo "write_json $json_file" >> script.ys
    yosys script.ys
    rm -f script.ys
    echo "Netlist JSON generated: $json_file"

    # 生成 SVG
    netlistsvg "$json_file"
    echo "Netlist SVG generated: $svg_file"
}

# 显示 Verigen 版本号
function show_version() {
    echo "Verigen version $VERIGEN_VERSION"
}


# 解析用户输入参数
case "$1" in
    "-help" | "--help" | "-h")
        echo "$HELP_TEXT"
        ;;
    "--version" | "-v" | "-V" | "--v")
        show_version
        ;;
    "")
        enter_shell
        ;;
    "-a" | "-all")
        if [[ -z "$2" ]]; then
            echo "Error: No Verilog file provided."
            exit 1
        fi
        generate_netlist "$2"
        ;;
    "-j" | "-json")
        if [[ -z "$2" ]]; then
            echo "Error: No Verilog file provided."
            exit 1
        fi
        generate_netlist "$2"
        rm -f "${2%.v}.svg"
        ;;
    "-s" | "-svg")
        if [[ -z "$2" ]]; then
            echo "Error: No Verilog file provided."
            exit 1
        fi
        generate_netlist "$2"
        rm -f "${2%.v}.svg"
        ;;
    *)
        if [[ -f "$1" && -f "$2" ]]; then
            run_simulation "$1" "$2"
        else
            echo "Error: Invalid command or missing files."
            exit 1
        fi
        ;;
esac
